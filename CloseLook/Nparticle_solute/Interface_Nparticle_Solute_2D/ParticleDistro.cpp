// distributes particles in randomly
//#include "ParticleDistro.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <time.h>
//#include "sphere.h"
#include "sphere.cpp"
// #include "peribc.cpp"

double *ParticleDistro(int mboxsize, int nboxsize, double Pf, int Pr)
{ 
  int particlesn=int(Pf*mboxsize*nboxsize/(3.1415*Pr*Pr)); // number of particles
  // cout <<"Number of particles are" << particlesn << endl;
  
  int nn,ii,jj; //random indexes
  int i,j; // loops
  int iind,jind,kind; //periodic indexes
  double irand,jrand,prand;
  double *ppfi;
  double *sphi;
  sphi=sphere(Pr);
  ppfi=new double[mboxsize*nboxsize];
  
  for (j=0;j<nboxsize;j++)
  {
    for (i=0;i<mboxsize;i++)
    {
      ppfi[i+j*mboxsize]=0;
    }
  }
  
  if (particlesn <0){
    ii=int(0.1*mboxsize+Pr+15);
    jj=int(mboxsize/2);
    for (i=-Pr;i<Pr+1;i++)
    {
      iind=peribc(ii+i,mboxsize);
      for (j=-Pr;j<Pr+1;j++)
      {
        jind=peribc(jj+j,nboxsize);
        ppfi[(iind)+(jind)*mboxsize]=sphi[(i+Pr)+(j+Pr)*2*Pr];
      }
    }
  }
  else{
//    srand ( time(NULL) );
    for (nn=0;nn<particlesn;nn++){
      irand=rand();
      jrand=rand();
      prand=rand();
      // these are random index of the top corner of a box contaning the particle.
      // The box is generated by sphere.cpp 
      ii=int((mboxsize*irand)/RAND_MAX);
      jj=int((nboxsize*jrand)/RAND_MAX);
      for (i=-Pr;i<Pr+1;i++)
      {
        iind=peribc(ii+i,mboxsize);
        for (j=-Pr;j<Pr+1;j++)
        {
          jind=peribc(jj+j,nboxsize);
          ppfi[(iind)+(jind)*mboxsize]=sphi[(i+Pr)+(j+Pr)*2*Pr];
        }
      }
    }
  }
  return ppfi;
}
