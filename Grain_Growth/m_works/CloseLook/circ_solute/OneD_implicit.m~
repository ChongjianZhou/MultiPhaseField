clear all
% function [Calculation_Error,averageitter]=implicit1(delt)
% phase field parameters
L=1;
m=2;
gamma=1.5;
kappa=4;
a=0.8;
b=4;

MGi=linspace(0.01,0.5,20);
for n=1:length(MGi)

    G=[-MGi(n) MGi(n)];
    % geometry settings
    p=2;

    delx=1;      % length unit per pixel
    nboxsize=100/delx; % x axis in pixels

    delt=0.1;
    timesteps=30/delt;
    x1=20*delx;
    eta=zeros(2,nboxsize);
    xi=[0:nboxsize-1]*delx;
    eta(1,:)=0.5*(1+tanh(sqrt(m/2/kappa)*(x1-xi)));
    eta(2,:)=0.5*(1-tanh(sqrt(m/2/kappa)*(x1-xi)));
    Mdetadtpast=zeros(2,nboxsize);
    syms v;
    Pfsym=a*v/(1+b*v^2);
    mobility=3/2*L*sqrt(2*kappa/m);
    e1=mobility*(G(2)-Pfsym)-v;
    e1sol=solve(e1);
    vel=eval(e1sol(1));

    %% implicit
    eta2=eta;
    ittr=0;

    for tn=1:timesteps
        eta2=eta; % future time step is similar to now
        eta2past=eta; error=100;
        itr=0;
        while (error>1e-6 && itr<20)
            eta2past=eta2;
            for p=1:2
                for j=2:nboxsize-1
                    sumterm=eta2(1,j)^2+eta2(2,j)^2;
                    ceta=(1*eta2(p,j)+0*eta(p,j));
                    del2=1/delx^2*(eta2(p,j+1)+eta2(p,j-1));
                    sumtermp=ceta*(sumterm-ceta.^2);

                    grad=0.5*(1-(2*eta(p,j)-1).^2)*sqrt(m/2/kappa);
                    velj=Mdetadtpast(p,j)/grad;
                    if isnan(velj)==true | isinf(velj)==true
                        velj=0;
                    end
                    if tn<20
                        a=0;
                    end
                    Pfj=(a*velj/(1+b*velj^2));
                    pre=1/(1+L*kappa*2*delt/delx^2-L*delt*m+L*delt*3*(G(p)+Pfj));
                    eta2(p,j)=pre*(eta(p,j)-delt*L.*(m*(ceta^3+2*gamma*sumtermp)-kappa.*del2-3*ceta^2*(G(p)+Pfj)));
                    
                    Mdetadtpast(p,j)=(eta2(p,j)-eta(p,j))/delt;
                    grad(j)=abs((eta(p,j+1)-eta(p,j-1))/2/delx);
                    grad2(j)=0.5*(1-(2*eta(p,j)-1)^2)*sqrt(m/2/kappa);
                    velj1(j)=Mdetadtpast(p,j)/grad(j);
                    velj2(j)=Mdetadtpast(p,j)/grad2(j);

                end
            end
            error=sum(sum((eta2-eta2past).^2));
            ittr=ittr+1;
            itr=itr+1;
            %         plot(xi,eta(1,:))
            %         hold on
            %         plot(xi,eta(2,:),'r')
            %         title(num2str(tn))
            %         hold off
            %         pause(0.01)
%         subplot(2,1,1)
%         plot(eta(1,:),'.-')
%         hold on
%         plot(eta(2,:),'r.-')
%         title(num2str(tn))
%         hold off
%         subplot(2,1,2)
%         plot(velj1(2:nboxsize-1),'.');hold on; plot([0 nboxsize],-[vel vel],'k')
%         plot(velj2(2:nboxsize-1),'r.');hold off; axis([0 nboxsize -vel-0.3 -vel+0.3]);title(['tn= ' num2str(tn) ', itr= ' num2str(itr)])
%         pause(0.02)
        end
        eta=eta2;
        

        
    end
    % figure
    % plot(xi,eta(1,:),'.')
    % hold on
    % plot(xi,eta(2,:),'r')
    % title(num2str(tn))
    % hold off
    % pause(0.01)
    ind=find(eta(1,:)>0.1 & eta(1,:)<0.9);
    pos=interp1(eta(1,ind),xi(ind),0.5);
    velcalc=(pos-x1)/(fix(timesteps)*delt);
    %     mobility=3/2*L*sqrt(2*kappa/m);
    %     analytical_vel=mobility*(G(2));
    %     Calculation_Error=(vel-analytical_vel)/analytical_vel*100
    averageitter=ittr/timesteps
    Mvel(n)=velcalc;

end


% delG vs V plots
mobility=3/2*L*sqrt(2*kappa/m);
intenergy=1/3*sqrt(2*m*kappa);
figure
plot(MGi/intenergy,Mvel/intenergy/mobility,'o')
hold on
axis([0 0.5 0 0.5]);box on
hold on
plot([0 0.5],[0 0.5],'r')

return
%% analytical

delG=linspace(0,0.5,50);
syms v;
Pfsym=a*v/(1+b*v^2);
ni=0;
for dG=delG
    ni=ni+1;
    e1=mobility*(dG-Pfsym)-v;
    e1sol=solve(e1);
    vel_sol(ni)=eval(e1sol(1));
end
hold on
plot(delG/intenergy,vel_sol/mobility/intenergy,'k')
xlabel('\Delta G/ \sigma_{gb}');
ylabel('V / (M \sigma_{gb})');

